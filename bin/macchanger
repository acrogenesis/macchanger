#!/usr/bin/env ruby

require 'optparse'

#InfectedDuck: just to remove that awkward error msg
ARGV << '-h' if ARGV.empty?

options = {}
VERSION = 1.0

OptionParser.new do |opts|
  opts.banner = 'Usage: macchanger [options] device'

  opts.on('-v', '--version', 'Displays MacChanger version') do
    puts "Version: #{VERSION}"
    exit
  end

  opts.on('-m', '--mac MAC', 'Set the MAC address, macchanger -m XX:XX:XX:XX:XX:XX en0') do |m|
    options[:mac] = m
    puts m
  end

  opts.on('-r', '--random', 'Set random MAC address, macchanger -r en0') do |r|
    options[:random] = r
  end

  opts.on('-s', '--show', 'Show the MAC address, macchanger -s en0') do |s|
    options[:show] = s
  end

end.parse!

class MacChanger
  def self.show(device)
    show = `ifconfig #{device} |grep ether`
    show[7, 17]
  end

  def self.generate
    (1..6).map { format('%0.2x', rand(256)) }.join(':')
  end

  def self.valid?(mac)
    unless mac.match(/^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/)
      fail ArgumentError, 'Mac address is not valid'
    end
  end

  def self.random(options)
    options[:mac] = generate
    if set(options)
      puts "Succesfuly setup #{options[:mac]} on #{options[:device]} device"
    else
      random(options)
    end
  end

  def self.set(options)
    if system("sudo ifconfig #{options[:device]} ether #{options[:mac]}")
      show(options[:device]) == options[:mac]
    end
  end

  def self.start(options)
    if options[:random]
      random(options)
    else
      if set(options)
        puts "Succesfuly setup #{options[:mac]} on #{options[:device]} device"
      else
        puts 'Try another mac address'
      end
    end
  end
end

options[:device] = ARGV[0] or fail ArgumentError, "Device can't be blank"

if options[:show]
  puts "Your mac address is: #{MacChanger.show(options[:device])}"
else
  MacChanger.valid?(options[:mac]) unless options[:random]
  MacChanger.start(options)
end
